模型
	1、说明
		Django对各种数据库提供了很好的支持，Django为这些数据库提供了统一的调用API，可以根据不同的业务需求配置不同的数据库。
	2、配置数据库
		1、修改__init__.py文件
			import pymysql
			pymysql.install_as_MySQLdb()
		2、修改setting.py文件中DATABASES
				DATABASES = {
    				'default': {
        				'ENGINE': 'django.db.backends.mysql',
        				'NAME': "li",
        				'USER': "root",
        				'PASSWORD': "10251206",
        				'HOST': 'localhost',
        				'PORT': '3306',
    				}
				}
	3、开发流程
		1、配置数据库
		2、定义模型类
			一个模型类都在数据库中对应一张表
		3、生成迁移文件
		4、执行生成数据表
		5、使用模型类进行增删改查（create replace update delete）操作
	4、ORM
		1、概念：对象-关系-映射
		2、任务
			根据对象的类型生成表结构
			将对象、列表的操作转换为sql语句
			将sql语句查询到的结果转换为对象、列表
		3、优点
			极大的减轻了开发人员的工作量，不需要面对因数据库的变更而修改代码
	5、定义模型
		1、模型、属性、表、字段的关系
			一个模型类都在数据库中对应一张表，在模型中定义的属性，对应该模型对照的表中的一个字段
		2、定义属性
			1、概述
				1、django根据属性的类型确定以下信息
					当前选择的数据库支持字段的类型
					渲染管理表单时使用的默认htnl文件
					在管理站点最低限度的验证
				2、django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列，则django不会再生成默认的主键列
				3、属性命名限制
					遵循标识符规则
					由于django的查询方式，不允许使用连续的下划线
			2、库
				1、定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，为了方便，被导入到django.db.models中
				2、使用方式
					导入from django.db import models
					通过models.Field创建字段类型的对象，赋值给属性
			3、逻辑删除
				对于重要数据都要做逻辑删除，不做物理删除，实现方法是定义isdelete属性，类型为BooleanField，默认值为Flase			
			4、字段类型
				1、AutoField
					一个根据实际ID自动增长的IntegerField，通常不指定如果不指定一个主键字段将自动添加到模型中
				2、CharFirld(max_lenhth=字段长度)
					字符串，默认的表单样式是TextInput
				3、TextField
					大文本字段，一般超过4000使用，默认的表单控件是Textarea
				4、IntegerField
					整数
				5、DecimalField(max_didits=None, decimal_places=None)小数
					使用python的Decimal实例表示的十进制浮点数
					DecimalField.max_didits:位数总数
					DecimalField.decimal_places:小数点后的数字位数
				6、FloatField
					用python的float实例来表示的浮点数
				7、BooleanField
					true/false字段，此字段的默认表单控制是checkboxInput
				8、NullBooleanField
					支持null、true、false三种值
				9、DateField([auto_now=False, auto_now_add=False])
					使用python的datetime.date实例表示时间
					DateField.auto_now
						每次保存对象时，自动设置该字段为当前时间，用于最后一次修改的时间戳，它总是使用当前日期，默认为false
					DateField.auto_now_add
						当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false。
					该字段的默认对应的表单控件是一个TextInput。在管理员站点添加了一个javascript写的日历控件，和一个today的快捷按钮，包含了一个额外的invalid_date错误消息
					auto_now、uto_now_add、default设置相互排斥，之间任何组合将会发生错误结果
				10、TimeField
					使用python的datetime.time实例表示时间，参数同DateField
				11、DateTimeField
					用python的datetime.datetime实例表示的日期和时间，参数同DateField
				12、FielField
					一个上传的字段
				13、ImageField
					继承了filefield的所有属性和方法，但对上传的对象进行校验，确保是一个有效的image
			5、字段选项
				1、概述
					通过字段选项，可以实现对字段的约束
					在字段对象时通过关键字参数指定
				2、null
					如果为true，django将空值以null存储到数据库中，默认值是false
				3、blanke
					如果为true，则该字段允许为空白，默认值是false
					null是数据库范畴概念，blank是表单验证范畴的
				4、db_column
					字段的名称，如果没指定则使用属性的名称
				5、db_index
					若值为true，则在表中会以此字段创建索引
				6、default
					默认值
				7、primary_key
					若值为true，则该字段会成为主键字段
				8、unique
					如果为true，这个字段在表中必须有唯一值
			6、关系
				1、分类
					ForeignKey:一对多，将字段定义在多的端中
					ManyToManyField：多对多，将字段定义在两端
					OneToOneField：一对一，将字段定义在任意一端中
				2、用一访问多
					格式
						对象.模型类小写_set
						grade.student_set
		3、创建模型类
		4、元选项
			1、在模型类中定义Meta类，用于设置元信息
			2、db_table：定义数据表名，推荐小写字母，数据表默认为项目名小写、类名小写
			3、ordering：对象的默认排序字段，获取对象的列表时使用
				ordering[^id] 升序
				ordering[^-id]降序
				排序会消耗资源
	6、模型成员
		类属性
			object：
				1、是Manage类型的一个对象，作用是与数据库进行交互
				2、当定义模型类是没有指定管理器，则Django为模型创建一个名为objects的管理器
			自定义管理器：
				class Students(models.Model):
				    #自定义模型管理器
				    stuObj = models.Manager()
			    当自定义模型管理器，Django就不再为模型生成objects模型管理器
			自定义管理器类：
				1、与数据库进行交互的接口，一个模型类可以有多个模型管理器
				2、作用
					1、向管理器类中添加额外的方法
					2、修改管理器返回的原始查询集  
						重写get_queryset
						class StudentsManager(models.Manager):
						    def get_queryset(self):
						        return super(StudentsManager, self).get_queryset().filter(sdelete=False)
		创建对象
			目的
				向数据库中添加数据
			注意：当创建对象时，django不会对数据库进行操作，当调用save（）方式时才与数据库交互，将对象保存到数据库表中
			注意：__init__方法在父类models.Madel中使用，在定义模型中无法使用
			1、在模型类中添加一个类方法
			    @classmethod
			    def createStudents(cls, name, age, gender, contend, grade, lastT, createT, isD=False):
			        stu = cls(sname=name,sage=age, sgender=gender, scontend=contend, sgrade=grade,lastTime=lastT, createTime=createT, sdelete=isD)
			        return stu
			2、在定义管理器中添加一个方法
				class StudentsManager(models.Manager):
			    def get_queryset(self):
			        return super(StudentsManager, self).get_queryset().filter(sdelete=False)
			    def createStudent(self, name, age, gender, contend, grade, lastT, createT, isD=False):
			        stu = self.model()
			        stu.sname = name
			        stu.sage = age
			        stu.sgender = gender
			        stu.scontend = contend
			        stu.sgrade = grade
			        stu.lastTime = lastT
			        stu.createTime = createT
			        return stu
		模型查询
			概念
				1、查询集表示从数据库获取的对象集合
				2、查询集可以有多个过滤器
				3、过滤器就是一个函数，基于所给的参数现在查询集结果
				4、从sql角度来说，查询集合select语句等价，过滤器就像where条件
			查询集
				1、在管理器上使用过滤器方法返回查询集
				2、查询集经过过滤器筛选后返回的查询集，所以可以写成链式调用
				3、惰性执行
					创建查询集不会带来任何数据访问，直到调动数据后，才会访问数据
				4、直接查询访问数据的情况
					迭代
					序列化
					与if合用
				5、返回查询集的方法称为过滤器
					all()
						返回查询集中的所有数据
					filter()
						返回符合条件的数据
						filter(键=值)
						filter(键=值，键=值)
						filter(键=值).filter(键=值)
					exclude()
						过滤到符合条件的数值
					order_by()
						排序
					values()
						一条数据就是一个对象(字典)
				6、返回单个函数
					get()
						返回一个满足条件的对象
						如果没有找到符合条件的对象，会引发模型类DoesNotExist异常
						如果找到多条符合条件的对象，会引发模型类MultipleObjectsReturned异常
					count()
						返回当前查询集中的对象的个数
					first()
						返回当前查询集中的第一个对象
					last()
						返回当前查询集中的第一个对象
					exists()
						判断查询集中是否有数据，有返回True，没有返回False
				7、限制查询集
					1、查询集返回列表，可以使用下标方法进行限制，等同于sql中的limit语句
					studentsList = Students.stuObj.all()[0:5]
					注意：下标不能是负数
				8、查询集的缓存
					1、概述
						每一个查询集都包含一个缓存，来最小化的对数据库访问
						在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存，django会将查询出来的数据做一个缓存，并返回查询结果，以后的查询直接使用查询集的缓存
				9、字段查询
					1、概念
						实现了sql中的where()语句，作为方法filter()、exclude[]、get()
						语法
							属性名称__比较运算符=值
						外键
							属性名_id
						转义
							类似于sql中的like语句使用%是为了匹配占位

					2、比较运算符
						1、exact
							判断，大小写敏感
							filter(isDelete__exact=False)
						2、contains
							是否包含，大小写敏感
							 studentsList = Students.stuObj.filter(sname__contains='li_2')
						3、startswith、endswith
							以value开头或结尾，大小写敏感
							 studentsList = Students.stuObj.filter(sname__startswith='li')
						4、以上四个在前面加上i，就表示不区分大小写iexact
						5、isnull、isnotnull
						6、in
							是否包含在范围内
						7、gt|gte|lt|lte
							大于|大于等于|小于|小于等于
						8、year|month|day|week_day|hour|minute|second
						9、跨关键字查询
							处理join查询
								模型类名__属性名__比较运算符
							Grades.objects.filter(students__sname__startswith='li')
						10、查询快捷
							pk  代表主键
					3、聚合函数
						1、使用sggregate()返回聚合函数的值
						2、Avg
						3、Count
						4、Max
							from django.db.models import Max
							studentsList = Students.stuObj.aggregate(Max('sage'))
						5、Min
						6、Sum
					4、F对象
						1、可以使用模型的A属性与B属性进行比较
							Grades.objects.filter(ggirlnum__lt=F('gboynum'))
						2、支持F对象的算数运算
					5、Q对象
						1、概述
							过滤器的方法中的关键字参数，条件为And模式
						2、使用Q对象，进行or查询
							Students.stuObj.filter(Q(pk__lte=3)|Q(sage__gt=50))
							只有一个Q对象，就是用于匹配的
						3、取反
							Students.stuObj.filter(~Q(pk__lte=3))
