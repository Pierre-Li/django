基本操作
	1、设计表结构
		班级表结构：
			表名：grade
			字段：
				班级名称：gname
				成立时间：gdate
				男生总数：ggirlnum
				女生总数：gboynum
				是否删除：gdelete
		学生表结构：
			表名：students
			字段：
				学生姓名：sname
				学生性别：sgender
				学生年龄：sage
				学生简介：scontend
				所属班级：sgrade
				是否删除：sdelete
	2、配置数据库：djingo默认使用sqlite数据
		1、在setting.py中，通过DATABASES选项进行数据库配置
		2、配置mysql
			a、python3.x安装的是pymysql
			b、在__init__.py文件中写入
				import pymysql
				pymysql.install_as_MySQLdb()
			c、配置
				DATABASES = {
    				'default': {
        				'ENGINE': 'django.db.backends.mysql',
        				'NAME': "li",
        				'USER': "root",
        				'PASSWORD': "10251206",
        				'HOST': 'localhost',
        				'PORT': '3306',
    				}
				}
	3、创建应用：
		1、在一个项目中可以创建多个应用，每个应用进行一种业务处理
		2、打开黑屏终端，进入project目录
			执行<python manage.py startapp myApp>
		3、myApp说明
			1、admin.py
				站点配置
			2、model.py
				模型
			3、view.py
				视图
	4、激活应用：
		1、在setting.py文件中，将myApp应用加入到INSTALLED_APPS选项中
			INSTALLED_APPS = [
    			'django.contrib.admin',
    			'django.contrib.auth',
    			'django.contrib.contenttypes',
			    'django.contrib.sessions',
			    'django.contrib.messages',
			    'django.contrib.staticfiles',
			    'myApp'
			]
	5、定义模型：
		1、有一个数据表就对应一个模型
		2、在models.py文件中定义模型
			1、引入《from django.db import models》
			2、模型类要继承models.Model类
				class Grades(models.Model):
				    gname = models.CharField(max_length=20)
				    gdate = models.DateTimeField()
				    ggirlnum = models.IntegerField()
				    gboynum = models.IntegerField()
				    gdelete = models.BooleanField(default=False)

				class Students(models.Model):
				    sname = models.CharField(max_length=20)
				    sgender = models.BooleanField(default=True)
				    sage = models.IntegerField()
				    scontend = models.CharField(max_length=20)
				    sdelete = models.BooleanField(default=False)
				    sgrade = models.ForeignKey('Grades')
			3、不需要定义主键，在生成时自动添加，并自动生成值
	6、在数据库中生成数据表：
		1、生成迁移文件
			执行<python manage.py makemigrations>
		2、执行迁移
			执行<python manage.py migrate>
	7、测试数据操作：
		1、进入到Python shell
			执行<python manage.py shell>
		2、引入包
			from myApp.models import Grades,Students
			from django.utils import timezone
			from datetime import *
		3、查询所有数据
			Grades.objects.all()
		4、添加数据
			创建一个模型类的对象实例
			grade1 = Grades()
			grade1.gname="python04"
			grade1.gdate=datetime(year=2019,month=9,day=10)
			grade1.ggirlnum=3
			grade1.gboynum=17
			grade1.save()
		5、查看某个对象
			Grades.objects.get(pk=2)
		6、修改数据
			模型对象.属性=新值  模型对象.save()
		7、删除数据
			物理删除：模型对象.delete() 数据库中表中被删除
		8、关联对象：
			stu = Students()
			stu.sname = "lee"
			stu.sgender=False
			stu.sage=24
			stu.scontend = "爱好游戏"
			stu.sgrade = grade1
			stu.save()
			1、获得关联对象的集合
				获取python04班级的所有学生
				grade1.students_set.all()	
			2、创建一个学生属于python04(直接创建到表中)
				stu3 = grade1.students_set.create(sname=u"pan",sgender=True,scontend=u"爱好游戏",sage=30)
		9、启动服务器
			1、格式
				python.manage.py runserver ip port
				ip可以不写，代表本机端口号；端口号默认800
			2、这是一个纯python写的轻量级web服务器，仅仅在开发测试中使用
	8、Admin站点管理：
		1、概述
			1、内容发布
				负责添加、修改、删除内容
			2、公告访问
		2、配置Admin应用
			在setting.py文件中的INSTALLED_APPS添加<django.contrib.admin>默认是已经添加好的
		3、创建管理员用户
			python manage.py createsuperuser
			依次输入用户名，邮箱，密码
		4、汉化
			修改setting.py文件
				LANGUAGE_CODE = 'zh-Hans'
				TIME_ZONE = 'Asia/Shanghai'
		5、管理数据表
			1、修改admin.py文件
				from .models import Grades,Students
				admin.site.register(Grades)
				admin.site.register(Students)
			2、自定义管理页面
				1、属性说明
					from .models import Grades,Students
					class GradesAdmin(admin.ModelAdmin):
					    #列表页属性
					    list_display = ['pk', 'gname', 'gdate', 'ggirlnum', 'gboynum', 'gdelete']
					    list_filter = ['gname']
					    search_fields = ['gname']
					    list_per_page = 5
					    #添加、修改页属性
					    #fields = ['ggirlnum', 'gboynum', 'gname', 'gdate',  'gdelete']
					    fieldsets = [
					        ("num", {"fields": ['ggirlnum', 'gboynum']}),
					        ("base", {"fields":['gname', 'gdate', 'gdelete']}),
					    ]
					admin.site.register(Grades, GradesAdmin)
					1、列表页属性
						list_display 显示字段
					    list_filter 过滤器，筛选
					    list_fields 搜索字段
					    list_per_page 分页
					2、添加、修改页属性
						fields 属性的先后顺序
    					fieldsets 给属性分组，
    					fields与fieldsets不能同时使用
    			2、关联对象
    				在创建一个班级时同时创建多个学生
    				class StudentsInfo(admin.TabularInline):#StackedInline
					    model = Students
					    extra = 2
					class GradesAdmin(admin.ModelAdmin):
					    inlines = [StudentsInfo]
				3、布尔值显示问题
					class StudentsAdmin(admin.ModelAdmin):
					    def gender(self):
					        if self.sgender:
					            return '男'
					        else:
					            return '女'
					    #设置页面列的名称
					    gender.short_description = '性别'
					    list_display = ['pk', 'sname', 'sage', gender, 'scontend', 'sgrade', 'sdelete']
				4、执行动作位置
					#执行动作的位置
					actions_on_top= False
					actions_on_bottom = True
			3、使用装饰器完成注册
				@admin.register(Students)
	9、视图的基本使用
		在django中，视图duiweb请求进行回应
		视图就是一个python函数，在views.py文件中定义
		1、定义视图
			from django.http import HttpResponse
			def idex(request):
				return HttpResponse('first view')
		2、配置project目录下的urls.py文件
			from django.contrib import admin
			from django.urls import path, include
			urlpatterns = [
			    path('admin/', admin.site.urls),
				path('', include('myApp.urls'))
			]
		3、在myApp应用目录下创建一个urls.py文件
			from django.urls import path
			from . import views
			urlpatterns = [
				path('', views.index)
				]
	10、模板的基本使用
		1、模板是HTML页面，可以根据视图中传递过来的数据进行填充
		2、创建模板目录
			创建template目录，在目录下创建对应项目的模板目录（project/template/myApp）
		3、配置模板路径
			修改setting.py文件下的TEMPLATES
			'DIRS': [os.path.join(BASE_DIR, 'templates')],
		4、定义grades.htnlhe和students模板
			1、模板语法
				{{输出值，可是变量，也可是对象.属性}}
				{%执行代码段%}
			2、
		5、http://127.0.0.1:8000/grades
			1、写grades.html模板
					<body>
					    <h1>班级信息列表</h1>
					    <ul>
					        {%for grade in grades%}
					        <li>
					            <a href="#">{{grade.gname}}</a>
					        </li>
					        {%endfor%}
					    </ul>
					</body>
				2、定义视图
					from .models import Grades
					def grades(request):
					    #去模板里取数据
					    gradesList = Grades.objects.all()
					    #将数据传递给模板,模板渲染页面，将渲染好的页面返回浏览器
					    return render(request, 'myApp/grades.html', {'grades':gradesList})
				3、配置url
					re_path(r'grades/$', views.grades),
			6、http://127.0.0.1:8000/students
				1、写students.html模板
					<body>
					    <h1>班级信息列表</h1>
					    <ul>
						    {%for student in students%}
					        <li>
					           {{student.sname}}--{{student.scontend}}
					        </li>
					        {%endfor%}
					    </ul>
					</body>
				2、定义视图
					from .models import Students
					def students(request):
					    studetsList = Students.objects.all()
					    return render(request, 'myApp/students.html', {'students':studetsList})
				3、配置url
					path('students/', views.students),


